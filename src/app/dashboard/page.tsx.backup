'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import AuthWrapper from '@/components/AuthWrapper';
import Navigation from '@/components/Navigation';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input, Select, Textarea } from '@/components/ui/form';
import { useNotification } from '@/components/ui/notification';
import { MessageSquare, Phone, Users, Send, Plus } from 'lucide-react';

interface Patient {
  id: string;
  firstName: string;
  lastName: string;
  phoneNumber: string;
  email?: string;
  smsEnabled: boolean;
  voiceEnabled: boolean;
  _count?: {
    appointments: number;
    communications: number;
  };
}

interface Template {
  id: string;
  name: string;
  type: 'SMS' | 'VOICE';
  content: string;
}

interface Communication {
  id: string;
  type: 'SMS' | 'VOICE';
  content: string;
  status: string;
  sentAt?: string;
  deliveredAt?: string;
  failedAt?: string;
  patient: {
    id: string;
    firstName: string;
    lastName: string;
    phoneNumber: string;
  };
  template?: {
    id: string;
    name: string;
  };
}

interface PatientGroup {
  id: string;
  name: string;
  description?: string;
  color: string;
  patients: {
    id: string;
    patient: {
      id: string;
      firstName: string;
      lastName: string;
      phoneNumber: string;
    };
  }[];
  _count: {
    patients: number;
  };
}

interface Analytics {
  stats: {
    totalCommunications: number;
    sms: { total: number; delivered: number; failed: number; pending: number };
    voice: { total: number; delivered: number; failed: number; pending: number };
  };
  successRates: { sms: number; voice: number };
  dailyStats: { date: string; sms: number; voice: number; total: number }[];
  topPatients: { name: string; count: number }[];
  recentFailures: {
    id: string;
    type: string;
    patient: string;
    phoneNumber: string;
    errorMessage: string;
    failedAt: string;
  }[];
}

export default function Dashboard() {
  const router = useRouter();
  const [patients, setPatients] = useState<Patient[]>([]);
  const [templates, setTemplates] = useState<Template[]>([]);
  const [communications, setCommunications] = useState<Communication[]>([]);
  const [patientGroups, setPatientGroups] = useState<PatientGroup[]>([]);
  const [analytics, setAnalytics] = useState<Analytics | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('dashboard');
  const { addNotification } = useNotification();

  // Logout function
  const handleLogout = () => {
    sessionStorage.removeItem('user');
    router.push('/login');
  };
  
  // Bulk messaging state
  const [selectedPatients, setSelectedPatients] = useState<string[]>([]);
  const [selectedGroups, setSelectedGroups] = useState<string[]>([]);
  const [scheduleMessage, setScheduleMessage] = useState(false);
  const [scheduledTime, setScheduledTime] = useState('');
  
  // Form states
  const [selectedPatient, setSelectedPatient] = useState('');
  const [selectedTemplate, setSelectedTemplate] = useState('');
  const [messageType, setMessageType] = useState<'SMS' | 'VOICE'>('SMS');
  const [customMessage, setCustomMessage] = useState('');
  const [sending, setSending] = useState(false);
  
  // Patient form
  const [newPatient, setNewPatient] = useState({
    firstName: '',
    lastName: '',
    phoneNumber: '',
    email: '',
    smsEnabled: true,
    voiceEnabled: true,
  });

  // Template form
  const [newTemplate, setNewTemplate] = useState({
    name: '',
    type: 'SMS' as 'SMS' | 'VOICE',
    content: '',
  });

  // CSV import state
  const [csvData, setCsvData] = useState('');
  const [skipHeader, setSkipHeader] = useState(true);
  const [importing, setImporting] = useState(false);
  const [importResults, setImportResults] = useState<{
    total: number;
    successful: number;
    failed: number;
    errors: string[];
  } | null>(null);

  // Group management state
  const [newGroup, setNewGroup] = useState({
    name: '',
    description: '',
    color: '#3B82F6',
    patientIds: [] as string[],
  });
  const [creatingGroup, setCreatingGroup] = useState(false);
  
  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      const [patientsRes, templatesRes, communicationsRes, groupsRes] = await Promise.all([
        fetch('/api/patients'),
        fetch('/api/templates'),
        fetch('/api/communications'),
        fetch('/api/patient-groups'),
      ]);
      
      if (patientsRes.ok) {
        const patientsData = await patientsRes.json();
        setPatients(patientsData);
      }
      
      if (templatesRes.ok) {
        const templatesData = await templatesRes.json();
        setTemplates(templatesData);
      }
      
      if (communicationsRes.ok) {
        const communicationsData = await communicationsRes.json();
        setCommunications(communicationsData);
      }
      
      if (groupsRes.ok) {
        const groupsData = await groupsRes.json();
        setPatientGroups(groupsData);
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSendMessage = async () => {
    if (!selectedPatient || (!selectedTemplate && !customMessage)) return;
    
    try {
      setSending(true);
      const endpoint = messageType === 'SMS' ? '/api/communications/sms' : '/api/communications/voice';
      
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          patientId: selectedPatient,
          templateId: selectedTemplate || undefined,
          customMessage: customMessage || undefined,
        }),
      });
      
      if (response.ok) {
        addNotification('success', 'Message sent successfully!');
        setSelectedPatient('');
        setSelectedTemplate('');
        setCustomMessage('');
        fetchData(); // Refresh communication history
      } else {
        const error = await response.json();
        addNotification('error', `Error: ${error.error}`);
      }
    } catch (error) {
      console.error('Error sending message:', error);
      addNotification('error', 'Failed to send message');
    } finally {
      setSending(false);
    }
  };

  const handleAddPatient = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const response = await fetch('/api/patients', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newPatient),
      });
      
      if (response.ok) {
        addNotification('success', 'Patient added successfully!');
        setNewPatient({
          firstName: '',
          lastName: '',
          phoneNumber: '',
          email: '',
          smsEnabled: true,
          voiceEnabled: true,
        });
        fetchData();
      } else {
        const error = await response.json();
        addNotification('error', `Error: ${error.error}`);
      }
    } catch (error) {
      console.error('Error adding patient:', error);
      addNotification('error', 'Failed to add patient');
    }
  };

  const handleAddTemplate = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const response = await fetch('/api/templates', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newTemplate),
      });
      
      if (response.ok) {
        addNotification('success', 'Template created successfully!');
        setNewTemplate({
          name: '',
          type: 'SMS',
          content: '',
        });
        fetchData();
      } else {
        const error = await response.json();
        addNotification('error', `Error: ${error.error}`);
      }
    } catch (error) {
      console.error('Error creating template:', error);
      addNotification('error', 'Failed to create template');
    }
  };

  const handleBulkSend = async () => {
    if (!customMessage.trim() || (!selectedPatients.length && !selectedGroups.length)) {
      addNotification('error', 'Please select recipients and enter a message');
      return;
    }

    setSending(true);
    try {
      const payload: {
        type: 'SMS' | 'VOICE';
        customMessage: string;
        templateId?: string | null;
        patientIds?: string[];
        groupId?: string;
        scheduleFor?: string;
      } = {
        type: messageType,
        customMessage,
        templateId: selectedTemplate || null,
      };

      if (selectedPatients.length > 0) {
        payload.patientIds = selectedPatients;
      }

      if (selectedGroups.length > 0) {
        payload.groupId = selectedGroups[0]; // For now, support one group at a time
      }

      if (scheduleMessage && scheduledTime) {
        payload.scheduleFor = new Date(scheduledTime).toISOString();
      }

      const response = await fetch('/api/communications/bulk', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      if (response.ok) {
        const result = await response.json();
        addNotification('success', result.message);
        setSelectedPatients([]);
        setSelectedGroups([]);
        setCustomMessage('');
        setSelectedTemplate('');
        setScheduleMessage(false);
        setScheduledTime('');
        fetchData(); // Refresh data
      } else {
        const error = await response.json();
        addNotification('error', `Error: ${error.error}`);
      }
    } catch (error) {
      console.error('Error sending bulk messages:', error);
      addNotification('error', 'Failed to send bulk messages');
    } finally {
      setSending(false);
    }
  };

  const handleCsvImport = async () => {
    if (!csvData.trim()) {
      addNotification('error', 'Please provide CSV data');
      return;
    }

    setImporting(true);
    try {
      // Parse CSV data
      const lines = csvData.split('\n').filter(line => line.trim() !== '');
      if (lines.length === 0) {
        addNotification('error', 'No data found in CSV');
        return;
      }

      // Convert to array format expected by the API
      const csvArray = lines.map(line => line.split(',').map(cell => cell.trim()));

      const response = await fetch('/api/patients/import', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          csvData: csvArray,
          skipHeader,
        }),
      });

      if (response.ok) {
        const result = await response.json();
        setImportResults(result.results);
        addNotification('success', result.message);
        fetchData(); // Refresh patient list
        setCsvData(''); // Clear the CSV data
      } else {
        const error = await response.json();
        addNotification('error', `Import failed: ${error.error}`);
      }
    } catch (error) {
      console.error('Error importing CSV:', error);
      addNotification('error', 'Failed to import CSV data');
    } finally {
      setImporting(false);
    }
  };

  const handleCreateGroup = async () => {
    if (!newGroup.name.trim()) {
      addNotification('error', 'Group name is required');
      return;
    }

    setCreatingGroup(true);
    try {
      const response = await fetch('/api/patient-groups', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: newGroup.name,
          description: newGroup.description || null,
          color: newGroup.color,
          patientIds: newGroup.patientIds,
        }),
      });

      if (response.ok) {
        const result = await response.json();
        addNotification('success', `Group "${result.name}" created successfully!`);
        setNewGroup({
          name: '',
          description: '',
          color: '#3B82F6',
          patientIds: [],
        });
        fetchData(); // Refresh groups
      } else {
        const error = await response.json();
        addNotification('error', `Error: ${error.error}`);
      }
    } catch (error) {
      console.error('Error creating group:', error);
      addNotification('error', 'Failed to create group');
    } finally {
      setCreatingGroup(false);
    }
  };

  const filteredTemplates = templates.filter(t => t.type === messageType);
  const selectedTemplateData = templates.find(t => t.id === selectedTemplate);

  // Load analytics when analytics tab is opened
  useEffect(() => {
    if (activeTab === 'analytics' && !analytics) {
      const loadAnalytics = async () => {
        try {
          const res = await fetch('/api/analytics');
          if (res.ok) {
            const data = await res.json();
            setAnalytics(data);
          }
        } catch (error) {
          console.error('Error loading analytics:', error);
        }
      };
      loadAnalytics();
    }
  }, [activeTab, analytics]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-xl text-gray-600">Loading...</div>
      </div>
    );
  }

  return (
    <AuthWrapper>
      <div className="min-h-screen bg-gray-50">
        {/* Navigation */}
        <Navigation variant="dashboard" />
        
        {/* Tab Navigation */}
        <div className="bg-white border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <nav className="flex space-x-2 overflow-x-auto py-4">
              <Button
                variant={activeTab === 'dashboard' ? 'primary' : 'outline'}
                onClick={() => setActiveTab('dashboard')}
                size="sm"
              >
                Dashboard
              </Button>
              <Button
                variant={activeTab === 'send' ? 'primary' : 'outline'}
                onClick={() => setActiveTab('send')}
                size="sm"
              >
                Send
              </Button>
              <Button
                variant={activeTab === 'bulk' ? 'primary' : 'outline'}
                onClick={() => setActiveTab('bulk')}
                size="sm"
              >
                Bulk
              </Button>
              <Button
                variant={activeTab === 'patients' ? 'primary' : 'outline'}
                onClick={() => setActiveTab('patients')}
                size="sm"
              >
                Patients
              </Button>
              <Button
                variant={activeTab === 'groups' ? 'primary' : 'outline'}
                onClick={() => setActiveTab('groups')}
                size="sm"
              >
                Groups
              </Button>
              <Button
                variant={activeTab === 'analytics' ? 'primary' : 'outline'}
                onClick={() => setActiveTab('analytics')}
                size="sm"
              >
                Analytics
              </Button>
              <Button
                variant={activeTab === 'templates' ? 'primary' : 'outline'}
                onClick={() => setActiveTab('templates')}
                size="sm"
              >
                Templates
              </Button>
              <Button
                variant={activeTab === 'history' ? 'primary' : 'outline'}
                onClick={() => setActiveTab('history')}
                size="sm"
              >
                History
              </Button>
            </nav>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'dashboard' && (
          <div className="space-y-8">
            {/* Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center">
                    <Users className="h-8 w-8 text-blue-500" />
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Total Patients</p>
                      <p className="text-2xl font-bold text-gray-900">{patients.length}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center">
                    <MessageSquare className="h-8 w-8 text-green-500" />
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">SMS Templates</p>
                      <p className="text-2xl font-bold text-gray-900">
                        {templates.filter(t => t.type === 'SMS').length}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center">
                    <Phone className="h-8 w-8 text-purple-500" />
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Voice Templates</p>
                      <p className="text-2xl font-bold text-gray-900">
                        {templates.filter(t => t.type === 'VOICE').length}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Recent Patients */}
            <Card>
              <CardHeader>
                <CardTitle>Recent Patients</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {patients.slice(0, 5).map((patient) => (
                    <div key={patient.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div>
                        <h4 className="font-medium text-gray-900">
                          {patient.firstName} {patient.lastName}
                        </h4>
                        <p className="text-sm text-gray-600">{patient.phoneNumber}</p>
                      </div>
                      <div className="flex items-center space-x-2">
                        {patient.smsEnabled && (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            SMS
                          </span>
                        )}
                        {patient.voiceEnabled && (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            Voice
                          </span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {activeTab === 'send' && (
          <div className="max-w-2xl mx-auto">
            <Card>
              <CardHeader>
                <CardTitle>Send Communication</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Message Type Selection */}
                <div className="flex space-x-4">
                  <Button
                    variant={messageType === 'SMS' ? 'primary' : 'outline'}
                    onClick={() => setMessageType('SMS')}
                    className="flex-1"
                  >
                    <MessageSquare className="h-4 w-4 mr-2" />
                    SMS
                  </Button>
                  <Button
                    variant={messageType === 'VOICE' ? 'primary' : 'outline'}
                    onClick={() => setMessageType('VOICE')}
                    className="flex-1"
                  >
                    <Phone className="h-4 w-4 mr-2" />
                    Voice Call
                  </Button>
                </div>

                {/* Patient Selection */}
                <Select
                  label="Select Patient"
                  value={selectedPatient}
                  onChange={(e) => setSelectedPatient(e.target.value)}
                >
                  <option value="">Choose a patient...</option>
                  {patients.map((patient) => (
                    <option key={patient.id} value={patient.id}>
                      {patient.firstName} {patient.lastName} - {patient.phoneNumber}
                    </option>
                  ))}
                </Select>

                {/* Template Selection */}
                <Select
                  label="Template (Optional)"
                  value={selectedTemplate}
                  onChange={(e) => setSelectedTemplate(e.target.value)}
                >
                  <option value="">Custom message...</option>
                  {filteredTemplates.map((template) => (
                    <option key={template.id} value={template.id}>
                      {template.name}
                    </option>
                  ))}
                </Select>

                {/* Message Content */}
                <Textarea
                  label="Message"
                  value={selectedTemplateData ? selectedTemplateData.content : customMessage}
                  onChange={(e) => setCustomMessage(e.target.value)}
                  placeholder={`Enter your ${messageType.toLowerCase()} message here...`}
                  rows={4}
                  disabled={!!selectedTemplateData}
                />

                {/* Send Button */}
                <Button
                  onClick={handleSendMessage}
                  disabled={!selectedPatient || (!selectedTemplate && !customMessage) || sending}
                  className="w-full"
                >
                  <Send className="h-4 w-4 mr-2" />
                  {sending ? 'Sending...' : `Send ${messageType}`}
                </Button>
              </CardContent>
            </Card>
          </div>
        )}

        {activeTab === 'bulk' && (
          <div className="space-y-8">
            <Card>
              <CardHeader>
                <CardTitle>Bulk Messaging</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Message Type Selection */}
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">Message Type</label>
                  <Select
                    value={messageType}
                    onChange={(e) => setMessageType(e.target.value as 'SMS' | 'VOICE')}
                  >
                    <option value="SMS">SMS Message</option>
                    <option value="VOICE">Voice Call</option>
                  </Select>
                </div>

                {/* Recipient Selection */}
                <div className="space-y-4">
                  <label className="text-sm font-medium text-gray-700">Recipients</label>
                  
                  {/* Individual Patients */}
                  <div className="space-y-2">
                    <h4 className="text-sm font-medium text-gray-600">Select Individual Patients</h4>
                    <div className="max-h-40 overflow-y-auto border border-gray-200 rounded-lg p-3 space-y-2">
                      {patients.map((patient) => (
                        <label key={patient.id} className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            checked={selectedPatients.includes(patient.id)}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setSelectedPatients([...selectedPatients, patient.id]);
                              } else {
                                setSelectedPatients(selectedPatients.filter(id => id !== patient.id));
                              }
                            }}
                            className="rounded"
                          />
                          <span className="text-sm">
                            {patient.firstName} {patient.lastName} ({patient.phoneNumber})
                            {messageType === 'SMS' && !patient.smsEnabled && 
                              <span className="text-red-500 ml-1">(SMS disabled)</span>}
                            {messageType === 'VOICE' && !patient.voiceEnabled && 
                              <span className="text-red-500 ml-1">(Voice disabled)</span>}
                          </span>
                        </label>
                      ))}
                    </div>
                  </div>

                  {/* Patient Groups */}
                  <div className="space-y-2">
                    <h4 className="text-sm font-medium text-gray-600">Select Patient Groups</h4>
                    <div className="space-y-2">
                      {patientGroups.map((group) => (
                        <label key={group.id} className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            checked={selectedGroups.includes(group.id)}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setSelectedGroups([...selectedGroups, group.id]);
                              } else {
                                setSelectedGroups(selectedGroups.filter(id => id !== group.id));
                              }
                            }}
                            className="rounded"
                          />
                          <span 
                            className="w-3 h-3 rounded-full mr-2" 
                            style={{ backgroundColor: group.color }}
                          ></span>
                          <span className="text-sm">
                            {group.name} ({group._count.patients} patients)
                          </span>
                        </label>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Template Selection */}
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">Message Template</label>
                  <Select
                    value={selectedTemplate}
                    onChange={(e) => {
                      setSelectedTemplate(e.target.value);
                      const template = templates.find(t => t.id === e.target.value && t.type === messageType);
                      if (template) {
                        setCustomMessage(template.content);
                      }
                    }}
                  >
                    <option value="">Select a template (optional)</option>
                    {templates
                      .filter(template => template.type === messageType)
                      .map((template) => (
                        <option key={template.id} value={template.id}>
                          {template.name}
                        </option>
                      ))}
                  </Select>
                </div>

                {/* Message Content */}
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">Message Content</label>
                  <Textarea
                    value={customMessage}
                    onChange={(e) => setCustomMessage(e.target.value)}
                    placeholder={`Enter your ${messageType.toLowerCase()} message here...`}
                    rows={4}
                    className="w-full"
                  />
                  <div className="text-xs text-gray-500">
                    Available variables: {'{firstName}'}, {'{lastName}'}, {'{fullName}'}
                  </div>
                </div>

                {/* Scheduling Options */}
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">Delivery Options</label>
                  <div className="space-y-3">
                    <label className="flex items-center space-x-2">
                      <input
                        type="radio"
                        name="deliveryType"
                        checked={!scheduleMessage}
                        onChange={() => setScheduleMessage(false)}
                        className="rounded"
                      />
                      <span className="text-sm">Send immediately</span>
                    </label>
                    <label className="flex items-center space-x-2">
                      <input
                        type="radio"
                        name="deliveryType"
                        checked={scheduleMessage}
                        onChange={() => setScheduleMessage(true)}
                        className="rounded"
                      />
                      <span className="text-sm">Schedule for later</span>
                    </label>
                    {scheduleMessage && (
                      <div className="ml-6 space-y-2">
                        <Input
                          type="datetime-local"
                          value={scheduledTime}
                          onChange={(e) => setScheduledTime(e.target.value)}
                          min={new Date().toISOString().slice(0, 16)}
                          className="w-auto"
                        />
                      </div>
                    )}
                  </div>
                </div>

                {/* Send Button */}
                <Button
                  onClick={handleBulkSend}
                  disabled={sending || (!selectedPatients.length && !selectedGroups.length) || !customMessage.trim()}
                  className="w-full"
                  variant="primary"
                >
                  <Send className="h-4 w-4 mr-2" />
                  {sending ? 'Sending...' : scheduleMessage ? 'Schedule Messages' : `Send Bulk ${messageType}`}
                </Button>

                {/* Summary */}
                {(selectedPatients.length > 0 || selectedGroups.length > 0) && (
                  <div className="bg-blue-50 p-4 rounded-lg">
                    <h4 className="font-medium text-blue-900 mb-2">Delivery Summary</h4>
                    <div className="text-sm text-blue-800 space-y-1">
                      {selectedPatients.length > 0 && (
                        <p>Individual patients: {selectedPatients.length}</p>
                      )}
                      {selectedGroups.length > 0 && (
                        <p>Patient groups: {selectedGroups.length} ({patientGroups.filter(g => selectedGroups.includes(g.id)).reduce((sum, g) => sum + g._count.patients, 0)} patients)</p>
                      )}
                      <p className="font-medium">
                        Total recipients: {selectedPatients.length + patientGroups.filter(g => selectedGroups.includes(g.id)).reduce((sum, g) => sum + g._count.patients, 0)}
                      </p>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* CSV Import */}
            <Card>
              <CardHeader>
                <CardTitle>Import Patients from CSV</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">CSV Data</label>
                  <Textarea
                    placeholder="Paste CSV data here or drag and drop a file..."
                    value={csvData}
                    onChange={(e) => setCsvData(e.target.value)}
                    rows={6}
                    className="w-full font-mono text-sm"
                  />
                  <div className="text-xs text-gray-500">
                    Expected format: firstName, lastName, phoneNumber, email, smsEnabled, voiceEnabled, medicalNotes
                  </div>
                </div>
                
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="skipHeader"
                    checked={skipHeader}
                    onChange={(e) => setSkipHeader(e.target.checked)}
                    className="rounded"
                  />
                  <label htmlFor="skipHeader" className="text-sm text-gray-700">
                    Skip header row
                  </label>
                </div>

                <div className="flex space-x-4">
                  <Button
                    onClick={handleCsvImport}
                    disabled={!csvData.trim() || importing}
                    variant="primary"
                  >
                    {importing ? 'Importing...' : 'Import Patients'}
                  </Button>
                  
                  <Button
                    onClick={async () => {
                      try {
                        const res = await fetch('/api/patients/import/template');
                        const data = await res.json();
                        const csvTemplate = data.template.map((row: string[]) => row.join(',')).join('\\n');
                        setCsvData(csvTemplate);
                        addNotification('info', 'Template loaded - edit as needed');
                      } catch (error) {
                        console.error('Error loading template:', error);
                        addNotification('error', 'Failed to load template');
                      }
                    }}
                    variant="outline"
                  >
                    Load Template
                  </Button>
                </div>

                {importResults && (
                  <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                    <h4 className="font-medium text-gray-900 mb-2">Import Results</h4>
                    <div className="text-sm space-y-1">
                      <p className="text-green-600">✓ Successfully imported: {importResults.successful}</p>
                      <p className="text-red-600">✗ Failed: {importResults.failed}</p>
                      <p className="text-gray-600">Total processed: {importResults.total}</p>
                    </div>
                    {importResults.errors.length > 0 && (
                      <div className="mt-3">
                        <h5 className="font-medium text-red-800 mb-1">Errors:</h5>
                        <div className="text-xs text-red-600 space-y-1 max-h-20 overflow-y-auto">
                          {importResults.errors.slice(0, 5).map((error, index) => (
                            <p key={index}>{error}</p>
                          ))}
                          {importResults.errors.length > 5 && (
                            <p>... and {importResults.errors.length - 5} more errors</p>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        )}

        {activeTab === 'patients' && (
          <div className="space-y-8">
            {/* Add New Patient */}
            <Card>
              <CardHeader>
                <CardTitle>Add New Patient</CardTitle>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleAddPatient} className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Input
                    label="First Name"
                    value={newPatient.firstName}
                    onChange={(e) => setNewPatient({ ...newPatient, firstName: e.target.value })}
                    required
                  />
                  <Input
                    label="Last Name"
                    value={newPatient.lastName}
                    onChange={(e) => setNewPatient({ ...newPatient, lastName: e.target.value })}
                    required
                  />
                  <Input
                    label="Phone Number"
                    type="tel"
                    value={newPatient.phoneNumber}
                    onChange={(e) => setNewPatient({ ...newPatient, phoneNumber: e.target.value })}
                    placeholder="+1234567890"
                    required
                  />
                  <Input
                    label="Email (Optional)"
                    type="email"
                    value={newPatient.email}
                    onChange={(e) => setNewPatient({ ...newPatient, email: e.target.value })}
                  />
                  <div className="md:col-span-2">
                    <Button type="submit" className="w-full">
                      <Plus className="h-4 w-4 mr-2" />
                      Add Patient
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>

            {/* Patients List */}
            <Card>
              <CardHeader>
                <CardTitle>All Patients ({patients.length})</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {patients.map((patient) => (
                    <div key={patient.id} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                      <div className="flex-1">
                        <h4 className="font-medium text-gray-900">
                          {patient.firstName} {patient.lastName}
                        </h4>
                        <p className="text-sm text-gray-600">{patient.phoneNumber}</p>
                        {patient.email && (
                          <p className="text-sm text-gray-600">{patient.email}</p>
                        )}
                      </div>
                      <div className="flex items-center space-x-4">
                        <div className="flex space-x-2">
                          {patient.smsEnabled && (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                              SMS Enabled
                            </span>
                          )}
                          {patient.voiceEnabled && (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                              Voice Enabled
                            </span>
                          )}
                        </div>
                        <div className="text-sm text-gray-500">
                          {patient._count && (
                            <span>
                              {patient._count.appointments} appointments, {patient._count.communications} messages
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {activeTab === 'history' && (
          <div className="space-y-8">
            <Card>
              <CardHeader>
                <CardTitle>Communication History</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {communications.length === 0 ? (
                    <p className="text-gray-500 text-center py-8">No communications sent yet.</p>
                  ) : (
                    communications.map((comm) => (
                      <div key={comm.id} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                        <div className="flex-1">
                          <div className="flex items-center space-x-2">
                            {comm.type === 'SMS' ? (
                              <MessageSquare className="h-4 w-4 text-green-500" />
                            ) : (
                              <Phone className="h-4 w-4 text-purple-500" />
                            )}
                            <h4 className="font-medium text-gray-900">
                              {comm.patient.firstName} {comm.patient.lastName}
                            </h4>
                          </div>
                          <p className="text-sm text-gray-600 mt-1">{comm.patient.phoneNumber}</p>
                          <p className="text-sm text-gray-700 mt-2 line-clamp-2">{comm.content}</p>
                          {comm.template && (
                            <p className="text-xs text-gray-500 mt-1">Template: {comm.template.name}</p>
                          )}
                        </div>
                        <div className="flex flex-col items-end space-y-2">
                          <span
                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                              comm.status === 'DELIVERED'
                                ? 'bg-green-100 text-green-800'
                                : comm.status === 'SENT'
                                ? 'bg-blue-100 text-blue-800'
                                : comm.status === 'FAILED'
                                ? 'bg-red-100 text-red-800'
                                : 'bg-yellow-100 text-yellow-800'
                            }`}
                          >
                            {comm.status}
                          </span>
                          <div className="text-xs text-gray-500">
                            {comm.deliveredAt && (
                              <p>Delivered: {new Date(comm.deliveredAt).toLocaleString()}</p>
                            )}
                            {comm.sentAt && !comm.deliveredAt && (
                              <p>Sent: {new Date(comm.sentAt).toLocaleString()}</p>
                            )}
                            {comm.failedAt && (
                              <p>Failed: {new Date(comm.failedAt).toLocaleString()}</p>
                            )}
                          </div>
                        </div>
                      </div>
                    ))
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {activeTab === 'templates' && (
          <div className="space-y-8">
            {/* Add New Template */}
            <Card>
              <CardHeader>
                <CardTitle>Create New Template</CardTitle>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleAddTemplate} className="space-y-4">
                  <Input
                    label="Template Name"
                    value={newTemplate.name}
                    onChange={(e) => setNewTemplate({ ...newTemplate, name: e.target.value })}
                    placeholder="e.g., Appointment Reminder"
                    required
                  />
                  
                  <Select
                    label="Template Type"
                    value={newTemplate.type}
                    onChange={(e) => setNewTemplate({ ...newTemplate, type: e.target.value as 'SMS' | 'VOICE' })}
                  >
                    <option value="SMS">SMS Message</option>
                    <option value="VOICE">Voice Call</option>
                  </Select>
                  
                  <Textarea
                    label="Template Content"
                    value={newTemplate.content}
                    onChange={(e) => setNewTemplate({ ...newTemplate, content: e.target.value })}
                    placeholder="Enter your message template here. Use {firstName}, {lastName}, {appointmentDate}, {appointmentTime} for dynamic values."
                    rows={4}
                    required
                  />
                  
                  <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
                    <h4 className="text-sm font-medium text-blue-800 mb-2">Available Variables:</h4>
                    <ul className="text-sm text-blue-700 space-y-1">
                      <li><code>{'{firstName}'}</code> - Patient&apos;s first name</li>
                      <li><code>{'{lastName}'}</code> - Patient&apos;s last name</li>
                      <li><code>{'{fullName}'}</code> - Patient&apos;s full name</li>
                      <li><code>{'{appointmentDate}'}</code> - Appointment date</li>
                      <li><code>{'{appointmentTime}'}</code> - Appointment time</li>
                      <li><code>{'{appointmentTitle}'}</code> - Appointment title</li>
                    </ul>
                  </div>
                  
                  <Button type="submit" className="w-full">
                    <Plus className="h-4 w-4 mr-2" />
                    Create Template
                  </Button>
                </form>
              </CardContent>
            </Card>

            {/* Templates List */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* SMS Templates */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <MessageSquare className="h-5 w-5 mr-2 text-green-500" />
                    SMS Templates ({templates.filter(t => t.type === 'SMS').length})
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {templates.filter(t => t.type === 'SMS').map((template) => (
                      <div key={template.id} className="p-4 border border-gray-200 rounded-lg">
                        <h4 className="font-medium text-gray-900 mb-2">{template.name}</h4>
                        <p className="text-sm text-gray-600 line-clamp-3">{template.content}</p>
                      </div>
                    ))}
                    {templates.filter(t => t.type === 'SMS').length === 0 && (
                      <p className="text-gray-500 text-center py-4">No SMS templates yet</p>
                    )}
                  </div>
                </CardContent>
              </Card>

              {/* Voice Templates */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Phone className="h-5 w-5 mr-2 text-purple-500" />
                    Voice Templates ({templates.filter(t => t.type === 'VOICE').length})
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {templates.filter(t => t.type === 'VOICE').map((template) => (
                      <div key={template.id} className="p-4 border border-gray-200 rounded-lg">
                        <h4 className="font-medium text-gray-900 mb-2">{template.name}</h4>
                        <p className="text-sm text-gray-600 line-clamp-3">{template.content}</p>
                      </div>
                    ))}
                    {templates.filter(t => t.type === 'VOICE').length === 0 && (
                      <p className="text-gray-500 text-center py-4">No voice templates yet</p>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )}

        {activeTab === 'analytics' && (
          <div className="space-y-8">
            <Card>
              <CardHeader>
                <CardTitle>Communication Analytics</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {/* Total Communications */}
                  <div className="bg-blue-50 p-6 rounded-lg">
                    <h3 className="text-lg font-semibold text-blue-900">Total Communications</h3>
                    <p className="text-3xl font-bold text-blue-700">{analytics?.stats.totalCommunications || 0}</p>
                    <p className="text-sm text-blue-600 mt-2">All time messages sent</p>
                  </div>

                  {/* SMS Stats */}
                  <div className="bg-green-50 p-6 rounded-lg">
                    <h3 className="text-lg font-semibold text-green-900">SMS Messages</h3>
                    <p className="text-3xl font-bold text-green-700">{analytics?.stats.sms.total || 0}</p>
                    <div className="text-sm text-green-600 mt-2">
                      <p>Delivered: {analytics?.stats.sms.delivered || 0}</p>
                      <p>Failed: {analytics?.stats.sms.failed || 0}</p>
                      <p>Success Rate: {analytics?.successRates.sms || 0}%</p>
                    </div>
                  </div>

                  {/* Voice Stats */}
                  <div className="bg-purple-50 p-6 rounded-lg">
                    <h3 className="text-lg font-semibold text-purple-900">Voice Calls</h3>
                    <p className="text-3xl font-bold text-purple-700">{analytics?.stats.voice.total || 0}</p>
                    <div className="text-sm text-purple-600 mt-2">
                      <p>Delivered: {analytics?.stats.voice.delivered || 0}</p>
                      <p>Failed: {analytics?.stats.voice.failed || 0}</p>
                      <p>Success Rate: {analytics?.successRates.voice || 0}%</p>
                    </div>
                  </div>
                </div>

                {/* Recent Activity Chart */}
                {analytics?.dailyStats && analytics.dailyStats.length > 0 && (
                  <div className="mt-8">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Daily Activity (Last 30 Days)</h3>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <div className="grid grid-cols-7 gap-2 text-xs">
                        {analytics.dailyStats.slice(-7).map((day, index) => (
                          <div key={index} className="text-center">
                            <div className="font-medium text-gray-600">{new Date(day.date).toLocaleDateString('en-US', { weekday: 'short' })}</div>
                            <div className="bg-blue-200 rounded mt-1" style={{ height: `${Math.max(20, (day.total / Math.max(...analytics.dailyStats.map(d => d.total), 1)) * 60)}px` }}>
                              <div className="text-xs font-medium pt-1">{day.total}</div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {/* Top Patients */}
                {analytics?.topPatients && analytics.topPatients.length > 0 && (
                  <div className="mt-8">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Most Active Patients</h3>
                    <div className="space-y-2">
                      {analytics.topPatients.slice(0, 5).map((patient, index) => (
                        <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                          <span className="font-medium">{patient.name}</span>
                          <span className="text-sm text-gray-600">{patient.count} messages</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Recent Failures */}
                {analytics?.recentFailures && analytics.recentFailures.length > 0 && (
                  <div className="mt-8">
                    <h3 className="text-lg font-semibold text-red-900 mb-4">Recent Failures</h3>
                    <div className="space-y-2">
                      {analytics.recentFailures.slice(0, 3).map((failure, index) => (
                        <div key={index} className="p-3 bg-red-50 border border-red-200 rounded-lg">
                          <div className="font-medium text-red-800">{failure.patient}</div>
                          <div className="text-sm text-red-600">{failure.type} to {failure.phoneNumber}</div>
                          <div className="text-xs text-red-500">{failure.errorMessage}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Refresh Button */}
                <div className="mt-8">
                  <Button
                    onClick={async () => {
                      try {
                        const res = await fetch('/api/analytics');
                        if (res.ok) {
                          const data = await res.json();
                          setAnalytics(data);
                          addNotification('success', 'Analytics refreshed');
                        }
                      } catch (error) {
                        console.error('Error refreshing analytics:', error);
                        addNotification('error', 'Failed to refresh analytics');
                      }
                    }}
                    variant="outline"
                  >
                    Refresh Analytics
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {activeTab === 'groups' && (
          <div className="space-y-8">
            {/* Create New Group */}
            <Card>
              <CardHeader>
                <CardTitle>Create Patient Group</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">Group Name</label>
                    <Input
                      value={newGroup.name}
                      onChange={(e) => setNewGroup({ ...newGroup, name: e.target.value })}
                      placeholder="e.g., Diabetes Patients"
                    />
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">Color</label>
                    <Input
                      type="color"
                      value={newGroup.color}
                      onChange={(e) => setNewGroup({ ...newGroup, color: e.target.value })}
                      className="w-20"
                    />
                  </div>
                </div>
                
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">Description</label>
                  <Textarea
                    value={newGroup.description}
                    onChange={(e) => setNewGroup({ ...newGroup, description: e.target.value })}
                    placeholder="Optional description for this group"
                    rows={2}
                  />
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">Add Patients to Group</label>
                  <div className="max-h-40 overflow-y-auto border border-gray-200 rounded-lg p-3 space-y-2">
                    {patients.map((patient) => (
                      <label key={patient.id} className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={newGroup.patientIds.includes(patient.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setNewGroup({
                                ...newGroup,
                                patientIds: [...newGroup.patientIds, patient.id]
                              });
                            } else {
                              setNewGroup({
                                ...newGroup,
                                patientIds: newGroup.patientIds.filter(id => id !== patient.id)
                              });
                            }
                          }}
                          className="rounded"
                        />
                        <span className="text-sm">
                          {patient.firstName} {patient.lastName} ({patient.phoneNumber})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>

                <Button
                  onClick={handleCreateGroup}
                  disabled={!newGroup.name.trim() || creatingGroup}
                  variant="primary"
                >
                  {creatingGroup ? 'Creating...' : 'Create Group'}
                </Button>
              </CardContent>
            </Card>

            {/* Existing Groups */}
            <Card>
              <CardHeader>
                <CardTitle>Patient Groups</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {patientGroups.length === 0 ? (
                    <p className="text-gray-500 text-center py-8">No patient groups created yet.</p>
                  ) : (
                    patientGroups.map((group) => (
                      <div key={group.id} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-3">
                            <div 
                              className="w-4 h-4 rounded-full" 
                              style={{ backgroundColor: group.color }}
                            ></div>
                            <div>
                              <h3 className="font-medium text-gray-900">{group.name}</h3>
                              {group.description && (
                                <p className="text-sm text-gray-600">{group.description}</p>
                              )}
                            </div>
                          </div>
                          <div className="flex items-center space-x-4">
                            <span className="text-sm text-gray-500">
                              {group._count.patients} patients
                            </span>
                            <Button
                              onClick={() => {
                                // Quick bulk message to group
                                setSelectedGroups([group.id]);
                                setActiveTab('bulk');
                              }}
                              variant="outline"
                              size="sm"
                            >
                              Message Group
                            </Button>
                          </div>
                        </div>
                        
                        {group.patients.length > 0 && (
                          <div className="mt-4">
                            <h4 className="text-sm font-medium text-gray-700 mb-2">Patients:</h4>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                              {group.patients.slice(0, 6).map((member) => (
                                <div key={member.id} className="text-sm text-gray-600">
                                  {member.patient.firstName} {member.patient.lastName}
                                </div>
                              ))}
                              {group.patients.length > 6 && (
                                <div className="text-sm text-gray-500">
                                  ... and {group.patients.length - 6} more
                                </div>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                    ))
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </main>
    </div>
    </AuthWrapper>
  );
}
