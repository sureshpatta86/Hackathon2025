// Healthcare Communication System Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Patient information and contact details
model Patient {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  phoneNumber String   @unique
  email       String?
  dateOfBirth DateTime?
  
  // Communication preferences
  smsEnabled    Boolean @default(true)
  voiceEnabled  Boolean @default(true)
  
  // Medical information
  medicalNotes String?
  
  // Relationships
  appointments   Appointment[]
  communications Communication[]
  groupMemberships PatientGroupMember[]
  scheduledCommunications ScheduledCommunication[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("patients")
}

// Appointment scheduling
model Appointment {
  id          String   @id @default(cuid())
  patientId   String
  
  title       String
  description String?
  appointmentDate DateTime
  duration    Int      @default(30) // minutes
  
  // Status tracking
  status      AppointmentStatus @default(SCHEDULED)
  
  // Reminder settings
  reminderSent Boolean @default(false)
  reminderDate DateTime?
  
  // Relationships
  patient       Patient          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  communications Communication[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("appointments")
}

// Communication templates for SMS and voice messages
model Template {
  id          String      @id @default(cuid())
  name        String
  type        MessageType
  
  // Template content
  content     String
  variables   String?     // JSON string for template variables
  
  // Voice-specific settings
  voiceSpeed  Float?      @default(1.0)
  voicePitch  Float?      @default(0.0)
  
  isActive    Boolean     @default(true)
  
  // Relationships
  communications Communication[]
  scheduledCommunications ScheduledCommunication[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("templates")
}

// Communication history and status tracking
model Communication {
  id          String            @id @default(cuid())
  patientId   String
  templateId  String?
  appointmentId String?
  
  // Message details
  type        MessageType
  content     String
  phoneNumber String
  
  // Delivery tracking
  status      CommunicationStatus @default(PENDING)
  
  // External service IDs for tracking
  twilioSid   String?
  
  // Delivery information
  sentAt      DateTime?
  deliveredAt DateTime?
  failedAt    DateTime?
  errorMessage String?
  
  // Cost tracking
  cost        Float?
  
  // Relationships
  patient     Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  template    Template?    @relation(fields: [templateId], references: [id])
  appointment Appointment? @relation(fields: [appointmentId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("communications")
}

// Patient groups for organizing patients by condition, department, etc.
model PatientGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3B82F6") // Hex color for UI
  
  // Relationships
  patients    PatientGroupMember[]
  scheduledCommunications ScheduledCommunication[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("patient_groups")
}

// Many-to-many relationship between patients and groups
model PatientGroupMember {
  id        String @id @default(cuid())
  patientId String
  groupId   String
  
  // Relationships
  patient Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  group   PatientGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  addedAt DateTime @default(now())
  
  @@unique([patientId, groupId])
  @@map("patient_group_members")
}

// Scheduled communications for future delivery
model ScheduledCommunication {
  id          String   @id @default(cuid())
  patientId   String?  // For individual patient
  groupId     String?  // For group messaging
  templateId  String?
  
  // Message details
  type        MessageType
  content     String
  scheduledFor DateTime
  
  // Status
  status      ScheduledStatus @default(PENDING)
  processedAt DateTime?
  
  // Recurrence settings
  isRecurring Boolean @default(false)
  recurrencePattern String? // JSON: {"type": "weekly", "interval": 1, "daysOfWeek": [1,3,5]}
  
  // Relationships
  patient     Patient?     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  group       PatientGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  template    Template?    @relation(fields: [templateId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("scheduled_communications")
}

// Communication analytics for tracking success rates
model CommunicationAnalytics {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  
  // Daily statistics
  smsCount        Int @default(0)
  smsDelivered    Int @default(0)
  smsFailed       Int @default(0)
  
  voiceCount      Int @default(0)
  voiceDelivered  Int @default(0)
  voiceFailed     Int @default(0)
  
  // Cost tracking
  totalCost       Float @default(0)
  smsCost         Float @default(0)
  voiceCost       Float @default(0)
  
  // Response tracking
  appointmentConfirmations Int @default(0)
  appointmentCancellations Int @default(0)
  
  @@unique([date])
  @@map("communication_analytics")
}

// User authentication model
model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String   // In production, this should be hashed
  role      String   @default("admin")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum MessageType {
  SMS
  VOICE
}

enum CommunicationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

enum ScheduledStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
