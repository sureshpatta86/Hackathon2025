generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id                      String                   @id @default(cuid())
  firstName               String
  lastName                String
  phoneNumber             String                   @unique
  email                   String?
  dateOfBirth             DateTime?
  smsEnabled              Boolean                  @default(true)
  voiceEnabled            Boolean                  @default(true)
  medicalNotes            String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  appointments            Appointment[]
  communications          Communication[]
  groupMemberships        PatientGroupMember[]
  scheduledCommunications ScheduledCommunication[]

  @@map("patients")
}

model Appointment {
  id              String            @id @default(cuid())
  patientId       String
  title           String
  description     String?
  appointmentDate DateTime
  duration        Int               @default(30)
  status          AppointmentStatus @default(SCHEDULED)
  reminderSent    Boolean           @default(false)
  reminderDate    DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  patient         Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  communications  Communication[]

  @@map("appointments")
}

model Template {
  id                      String                   @id @default(cuid())
  name                    String
  type                    MessageType
  content                 String
  variables               String?
  voiceSpeed              Float?                   @default(1.0)
  voicePitch              Float?                   @default(0.0)
  isActive                Boolean                  @default(true)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  communications          Communication[]
  scheduledCommunications ScheduledCommunication[]

  @@map("templates")
}

model Communication {
  id            String              @id @default(cuid())
  patientId     String
  templateId    String?
  appointmentId String?
  type          MessageType
  content       String
  phoneNumber   String
  status        CommunicationStatus @default(PENDING)
  twilioSid     String?
  sentAt        DateTime?
  deliveredAt   DateTime?
  failedAt      DateTime?
  errorMessage  String?
  cost          Float?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  appointment   Appointment?        @relation(fields: [appointmentId], references: [id])
  patient       Patient             @relation(fields: [patientId], references: [id], onDelete: Cascade)
  template      Template?           @relation(fields: [templateId], references: [id])

  @@map("communications")
}

model PatientGroup {
  id                      String                   @id @default(cuid())
  name                    String
  description             String?
  color                   String                   @default("#3B82F6")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  patients                PatientGroupMember[]
  scheduledCommunications ScheduledCommunication[]

  @@map("patient_groups")
}

model PatientGroupMember {
  id        String       @id @default(cuid())
  patientId String
  groupId   String
  addedAt   DateTime     @default(now())
  group     PatientGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  patient   Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@unique([patientId, groupId])
  @@map("patient_group_members")
}

model ScheduledCommunication {
  id                String          @id @default(cuid())
  patientId         String?
  groupId           String?
  templateId        String?
  type              MessageType
  content           String
  scheduledFor      DateTime
  status            ScheduledStatus @default(PENDING)
  processedAt       DateTime?
  isRecurring       Boolean         @default(false)
  recurrencePattern String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  group             PatientGroup?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  patient           Patient?        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  template          Template?       @relation(fields: [templateId], references: [id])

  @@map("scheduled_communications")
}

model CommunicationAnalytics {
  id                       String   @id @default(cuid())
  date                     DateTime @unique @default(now())
  smsCount                 Int      @default(0)
  smsDelivered             Int      @default(0)
  smsFailed                Int      @default(0)
  voiceCount               Int      @default(0)
  voiceDelivered           Int      @default(0)
  voiceFailed              Int      @default(0)
  totalCost                Float    @default(0)
  smsCost                  Float    @default(0)
  voiceCost                Float    @default(0)
  appointmentConfirmations Int      @default(0)
  appointmentCancellations Int      @default(0)

  @@map("communication_analytics")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum MessageType {
  SMS
  VOICE
}

enum CommunicationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

enum ScheduledStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
